## Exercises and notes from Lesson 1 - Computational Linear Algebra (why are we here?)  

# Exercise 1

import numpy as np

matrix_vector = np.array([[0.85],[0.1],[0.5],[0.0]])
matrix = np.array([[0.9,0.07, 0.02, 0.01], [0.0,0.93,0.05,0.02], [0,0,0.85,0.15],[0.0,0.0,0.0,1.00]])

#print(matrix_vector)
#print(matrix)

HIV_Result = matrix*matrix_vector
np.result = HIV_Result.sum(axis=0)

# or another solution
print(matrix_vector.T @ matrix.T)

print(np.result)
#print(HIV_Result)

# Exercise 2

foodstuff = np.array([[6,5,3,1],[3,6,2,2],[3,4,3,1]])
shops = np.array([[1.50,1.00],[2.00,2.50],[5.00,4.50],[16.00,17.00]])

print(shops)

food_shops = foodstuff @ shops
print(food_shops)


# Floating Point Arithemetic

def f(x):
    if x <= 1/2:
        return 2 *x
    if x > 1/2:
        return 2*x - 1
    
x = 1/10
for i in range(80):
    print(x)
    x = f(x)

# Conditioning and Stability 
import scipy.linalg as la

A = np.array([[1., 1000], [0,1]])
B = np.array([[1, 1000], [0.001, 1]])

print(A)
print(B)

np.set_printoptions(suppress = True, precision = 4)

wA, vrA = la.eig(A)
# bloom filters never receive a definite yes 
